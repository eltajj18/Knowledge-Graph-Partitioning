import matplotlib.pyplot as plt

# Parse log data
time, memory,cpu = [], [],[]
log_data = """300 61.775238132391024 1.6827810278420664
600 2.267076672178143 1.7782624065720933
900 5.729787143902235 24.8047995017442
1200 5.919065933600631 27.808123044863076
1500 9.018867786478513 30.855044699006706
1800 24.004326406250048 23.93236827742413
2100 57.065336527374825 34.34876236781035
2400 57.131488869583244 24.798615015940015
2700 57.21614151778174 65.89231629070734
3000 57.332377689039525 57.31964264989354
3300 57.387862776189635 42.512186029002874
3600 57.49554809056044 38.29472784559531
3900 57.49916608915941 18.070873990832598
4200 57.512913198190795 37.955160504100605
4500 57.538207354612304 25.0469277063997
4800 58.81931874032037 33.882185878772964
5100 60.026281746732565 27.405345434569656
5400 60.25286696153537 35.038910186538635
5700 60.327124471983325 25.89975818575825
6000 60.38563452663339 55.9623760245037
6300 60.4653074378144 58.34570572085742
6600 60.53166110750541 47.33772822592603
6900 60.57328025379366 34.736083760280806
7200 60.59688412700658 24.857875505880048
7500 60.593805036399374 35.98781487675099
7800 60.63352674439911 28.01579155906529
8100 60.709484978857375 34.45118416300844
8400 60.771502701759935 21.217697944315658
8700 60.83538414969813 29.855865702924195
9000 60.92779655472622 21.449321155049192
9300 60.99856060931459 26.44112516097372
9600 61.08922749918491 64.05849626411949
9900 61.16328106784758 52.14352597687154
10200 61.223167978949355 43.688025697502475
10500 61.258546843319166 31.272042216727036
10800 61.27641753070858 20.774162730087328
11100 61.24830499598385 34.03888192142085
11400 61.290573188367354 27.59060611113758
11700 61.32580009614584 32.146967888871886
12000 61.32991912116521 23.342215200414254
12300 61.364920002560375 31.227729068889704
12600 61.44730397725834 24.910137716014108
12900 61.47320351593064 34.162267865148654
13200 61.53830936962701 68.3782698037233
13500 61.57125330025282 55.23265139721024
13800 61.635632563048176 36.101870163011274
14100 61.656748780946536 34.223553922864686
14400 61.66820508807723 15.01723330771468
14700 61.71898017989178 34.17780689476119
15000 61.65198375987446 24.20121167989661
15300 61.71192602865567 28.84064129711078
15600 61.77467932489143 18.507858136809166
15900 61.82389719304395 19.79976541721135
16200 61.88798216388469 31.276610168569585
16500 61.96847268155511 18.051623214013793
16800 62.01620372021255 26.771522431052286
17100 62.06846201790806 63.73889017255806
17400 62.12774238253962 47.5270407526062
17700 62.19212773367832 41.30393608771283
18000 62.25247828912944 30.036285457767314
18300 62.20914462153463 21.417594281532124
18600 62.24078717274519 25.12727729224601
18900 62.237882728651996 31.920709298587097
19200 62.34671122807473 27.965114401099533
19500 62.343474961547145 21.371860522409708
19800 62.42610205591842 21.260998887318844
20100 62.496330008549144 32.444818576011436
20400 62.57575818907554 19.508332817092802
20700 62.62209822844291 35.4923891484926
21000 62.69925618852275 62.20878269471632
21300 62.720055402870415 49.95290348404554
21600 62.79626661924171 35.125194265480786
21900 62.81341118292444 34.78575843662444
22200 62.82300497488681 15.2947722078934
22500 62.81023416686982 34.57992611799212
22800 62.86380658828936 24.864644892016866
23100 62.95613273064207 30.690483145082303
23400 62.98572622468979 22.404932734483435
23700 63.05280086028723 30.42766433699126
24000 63.13690312357628 24.26192059653264
24300 63.187623609013826 23.92144886469941
24600 63.257955162012856 65.32754519631969
24900 63.31869835018133 57.07125310510552
25200 63.385108215995785 45.5288873915803
25500 63.458981083311286 34.008281449143396
25800 63.4680801701497 21.13602632103963
26100 63.44132200029244 32.88346711901068
26400 63.46038230781371 28.014400854049504
26700 63.53790692269898 30.978504443519345
27000 63.59357993770316 21.56584060180224
27300 63.64692853894315 27.472011610673996
27600 63.732129628445534 23.665400176969342
27900 63.76606861193036 20.961235986647803
28200 63.84157041336906 47.28051926157059
28500 63.911967400815946 60.45076359752177
28800 63.97378052699796 49.06062802868534
29100 64.0227212962227 28.18935150284172
29400 64.04684835168912 33.47914312537917
29700 64.03583888450054 16.10119405697515""".split('\n')

for line in log_data:
    parts = line.split()
    time.append(int(parts[0]))
    memory.append(float(parts[1]))
    cpu.append(float(parts[2]))
# Find extrema
maxima, minima = [], []
maxima_cpu, minima_cpu = [], []

for i in range(1, len(cpu)-1):
    if cpu[i] > cpu[i-1] and cpu[i] > cpu[i+1]:
        maxima_cpu.append((time[i], cpu[i]))
    elif cpu[i] < cpu[i-1] and cpu[i] < cpu[i+1]:
        minima_cpu.append((time[i], cpu[i]))

for i in range(1, len(memory)-1):
    if memory[i] > memory[i-1] and memory[i] > memory[i+1]:
        maxima.append((time[i], memory[i]))
    elif memory[i] < memory[i-1] and memory[i] < memory[i+1]:
        minima.append((time[i], memory[i]))

# Add endpoints
if memory[0] > memory[1]:
    maxima.insert(0, (time[0], memory[0]))
elif memory[0] < memory[1]:
    minima.insert(0, (time[0], memory[0]))

if memory[-1] > memory[-2]:
    maxima.append((time[-1], memory[-1]))
elif memory[-1] < memory[-2]:
    minima.append((time[-1], memory[-1]))




if cpu[0] > cpu[1]:
    maxima_cpu.insert(0, (time[0], cpu[0]))
elif memory[0] < memory[1]:
    minima_cpu.insert(0, (time[0], cpu[0]))

if cpu[-1] > cpu[-2]:
    maxima_cpu.append((time[-1], cpu[-1]))
elif memory[-1] < memory[-2]:
    minima_cpu.append((time[-1], cpu[-1]))


print("Memory usage maxima:")
for t, mem in maxima:
    print(f"Time: {t} s, Memory: {mem:.2f}%")

print("\nMemory usage minima:")
for t, mem in minima:
    print(f"Time: {t} s, Memory: {mem:.2f}%")


print("CPU usage maxima:")
for t, cpu in maxima_cpu:
    print(f"Time: {t} s, CPU: {cpu:.2f}%")

print("\nCPU usage minima:")
for t, cpu in minima_cpu:
    print(f"Time: {t} s, CPU: {cpu:.2f}%")